============
Introduction
============

.. WARNING::
   These documentation along with the Anubis Shell Autograde library are a work in progress.
   Consider this a live document.

Installing
==========

The autograde library is installed as a python command line library. The command line
contains everything you will need to create, run, and debug anubis shell autograde
assignments.

.. NOTE::
   If you are in an Anubis IDE, you do not need to install the package. It will be pre-installed.

.. code-block:: sh
   :caption: Install Anubis Shell Autograder CLI

   pip install git+https://github.com/AnubisLMS/Anubis.git#subdirectory=theia/autograde


Components
==========

Student Shell
-------------

The student shell is where the input for the autograder comes from. The student shell will be a bash shell
with hooks that run after each command. These hooks will forward information to the autograde python server.

The reason for this split is that we can do logic and analysis in python a lot easier and faster than in pure
shell hooks.

Because the student shell needs these hooks loaded, the bashrc that is run when the shell is generated by the
autograde server on startup.

The student shell will look something like this:

::

    (helloworld) anubis@anubis-ide:~$

The ``(helloworld)`` is the name of the current exercise.


Autograde Python Server
-----------------------

The autograde python server is where the magic really happens. The server itself is a flask python server.
It is responsible for taking what the students give (called a ``UserState``), and verifying if it is actually correct
or not.


Exercise Configuration
======================

