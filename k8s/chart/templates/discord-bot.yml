{{- if .Values.discordbot.enable }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: anubis-discord-bot
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: anubis
    component: discord-bot
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: anubis
      component: discord-bot
  replicas: {{ .Values.discordbot.replicas }}
  {{- if .Values.rollingUpdates }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anubis
        component: discord-bot
    spec:
      containers:
      - name: discord-bot
        image: {{ .Values.api.image }}:{{ .Values.api.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["python3", "jobs/bot.py"]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 2
            memory: 500Mi
        env:
        - name: "DEBUG"
          value: {{- if .Values.debug }} "1"{{- else }} "0"{{- end }}
        - name: "MIGRATE"
          value: "0"
        - name: "PYTHONPATH"
          value: "/opt/app"
        - name: "DISCORD_BOT_TOKEN"
          valueFrom:
            secretKeyRef:
              name: api
              key: discord-bot-token
        - name: "DATABASE_URI"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        - name: "DB_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-password
        - name: "DB_HOST"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-host
        - name: "DB_PORT"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-port
        - name: "REDIS_PASS"
          valueFrom:
            secretKeyRef:
              name: api
              key: redis-password
        {{- if .Values.healthChecks }}
        startupProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 3
          failureThreshold: 60
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 60
          failureThreshold: 10
          periodSeconds: 60
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 3
          failureThreshold: 1
        {{- end }}

{{- end }}