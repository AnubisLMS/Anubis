apiVersion: apps/v1
kind: Deployment
metadata:
  name: anubis-api
  namespace: anubis

spec:
  selector:
    matchLabels:
      app: anubis-api
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: anubis-api
    spec:
      dnsPolicy: ClusterFirst
      containers:
      - name: anubis-api
        image: registry.osiris.services/anubis/api:v2.0.0-alpha
        imagePullPolicy: Always
        ports:
        - name: web
          containerPort: 5000
        resources:
          limits:
            memory: "200Mi"
          requests:
            memory: "100Mi"
        env:
        - name: "DEBUG"
          value: "1"
        - name: "DISABLE_ELK"
          value: "0"
        # Gunicorn workers
        - name: "WORKERS"
          value: "4"
        - name: "GUNICORN_OPTIONS"
          value: "--preload --capture-output --enable-stdio-inheritance"
        - name: "SECRET_KEY"
          valueFrom:
            secretKeyRef:
              name: api
              key: secret-key
        - name: DB_HOST
          value: mariadb.mariadb.svc.cluster.local
        # sqlalchemy uri
        - name: "DATABASE_URI"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        livenessProbe:
          exec:
            command:
              - curl
              - http://localhost:5000/
          initialDelaySeconds: 120
          periodSeconds: 5

      # Mail container
      - name: smtp
        image: namshi/smtp
        resources:
          limits:
            memory: "100Mi"
          requests:
            memory: "100Mi"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: anubis-debug
  namespace: anubis

spec:
  selector:
    matchLabels:
      app: anubis-debug
  template:
    metadata:
      labels:
        app: anubis-debug
    spec:
      dnsPolicy: ClusterFirst
      containers:
      - name: jupyter
        image: registry.osiris.services/anubis/api-dev:v2.0.0-alpha
        imagePullPolicy: Always
        ports:
        - name: web
          containerPort: 5003
        resources:
          limits:
            memory: "200Mi"
          requests:
            memory: "100Mi"
        env:
          - name: DB_HOST
            value: mariadb.mariadb.svc.cluster.local
          # sqlalchemy uri
          - name: "DATABASE_URI"
            valueFrom:
              secretKeyRef:
                name: api
                key: database-uri

      - name: adminer
        image: adminer
        env:
        - name: "ADMINER_DEFAULT_SERVER"
          value: "mariadb.mariadb.svc.cluster.local"
        ports:
        - name: adminer
          containerPort: 8080
        resources:
          limits:
            memory: "200Mi"
          requests:
            memory: "100Mi"


---
apiVersion: v1
kind: Service
metadata:
  name: anubis
  namespace: anubis
  labels:
    app: anubis-api
spec:
  selector:
    app: anubis-api
  ports:
  - name: web
    port: 5000
    targetPort: 5000

---
apiVersion: v1
kind: Service
metadata:
  name: anubis-debug
  namespace: anubis
  labels:
    app: anubis-debug
spec:
  selector:
    app: anubis-debug
  ports:
  - name: adminer
    port: 5002
    targetPort: 8080
  - name: jupyter
    port: 5003
    targetPort: 5003

---
# Strip prefix /api
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-api
  namespace: anubis
spec:
  stripPrefix:
    prefixes:
      - "/api"
---
# Declaring the user list
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: private-api-basicauth
  namespace: anubis
spec:
  basicAuth:
    secret: private-api-basicauth

---
# Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first.
# To create an encoded user:password pair, the following command can be used:
# htpasswd -nb user password | openssl base64

apiVersion: v1
kind: Secret
metadata:
  name: private-api-basicauth
  namespace: anubis

data:
  users: |2
    bGludXhpc2xvdmU6JDJ5JDA1JEptLldYL1Nrb2h1WHNkZWZuaE1OdWVod1kwc2tN
    RTRubG5JSEs0NnpLS0hxNlM3b1RPVjJD

---
# Public Ingress Route /api/public/*
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress.route.anubis.api.public
  namespace: anubis
spec:
  entryPoints:
    - websecure
  routes:
  - kind: Rule
    match: Host(`anubis.osiris.services`) && PathPrefix(`/api/`)
    middlewares:
    - name: whitelist-vpn
      namespace: traefik
    - name: strip-api
      namespace: anubis
    services:
    - name: anubis
      port: 5000
  tls:
    certResolver: tls

---
# Private Ingress Route /api/private/*
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress.route.anubis.api.private
  namespace: anubis
spec:
  entryPoints:
    - websecure
  routes:
  - kind: Rule
    match: Host(`anubis.osiris.services`) && PathPrefix(`/api/private/`)
    middlewares:
    - name: whitelist-vpn
      namespace: traefik
    - name: strip-api
      namespace: anubis
    - name: private-api-basicauth
      namespace: anubis
    services:
    - name: anubis
      port: 5000
  tls:
    certResolver: tls
