apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: anubis

spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: api
    spec:
      dnsPolicy: ClusterFirst
      containers:
      - name: api
        image: registry.osiris.services/anubis/api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: web
          containerPort: 5000
        env:
        # Gunicorn workers
        - name: "WORKERS"
          value: "8"
        - name: "DEBUG"
          value: "0"
        # sqlalchemy uri
        - name: "DATABASE_URL"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        livenessProbe:
          exec:
            command:
              - curl
              - http://localhost:5000/
          initialDelaySeconds: 30
          periodSeconds: 5


      # Mail container
      - name: smtp
        image: namshi/smtp
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: anubis
  labels:
    app: api
spec:
  type: NodePort
  selector:
    app: api
  ports:
  - name: web
    port: 80
    targetPort: 5000

---
# Strip prefix /api
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-api
  namespace: anubis
spec:
  stripPrefix:
    prefixes:
      - "/api"

---
# Declaring the user list
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: private-api-basicauth
  namespace: anubis
spec:
  basicAuth:
    secret: private-api-basicauth

---
# Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first.
# To create an encoded user:password pair, the following command can be used:
# htpasswd -nb user password | openssl base64

apiVersion: v1
kind: Secret
metadata:
  name: private-api-basicauth
  namespace: anubis

data:
  users: |2
    bGludXhpc2xvdmU6JDJ5JDA1JEptLldYL1Nrb2h1WHNkZWZuaE1OdWVod1kwc2tN
    RTRubG5JSEs0NnpLS0hxNlM3b1RPVjJD

---
# Public Ingress Route /api/public/*
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress.route.anubis.api.public
  namespace: anubis
spec:
  entryPoints:
    - websecure
  routes:
  - kind: Rule
    match: Host(`anubis.osiris.services`) && PathPrefix(`/api/public/`)
    middlewares:
    - name: whitelist-vpn
      namespace: traefik
    - name: strip-api
      namespace: anubis
    services:
    - name: api
      port: 80
  tls:
    certResolver: tls

---
# Private Ingress Route /api/private/*
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress.route.anubis.api.private
  namespace: anubis
spec:
  entryPoints:
    - websecure
  routes:
  - kind: Rule
    match: Host(`anubis.osiris.services`) && PathPrefix(`/api/private/`)
    middlewares:
    - name: whitelist-vpn
      namespace: traefik
    - name: strip-api
      namespace: anubis
    - name: private-api-basicauth
      namespace: anubis
    services:
    - name: api
      port: 80
  tls:
    certResolver: tls
